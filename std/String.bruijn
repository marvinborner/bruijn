# MIT License, Copyright (c) 2022 Marvin Borner

:import std/Char C
:import std/Math .
:import std/Number/Binary B

:input std/List

# returns true if two strings are the same
eq? eq? B.eq? ⧗ String → String → Boolean

…=?… eq?

:test ("ab" =? "ab") (true)
:test ("ab" =? "aa") (false)

# prefix for comparing functions
?‣ &eq?

# returns true if character is part of a string
in? B.?in? ⧗ Char → String → Boolean

…∈… in?

ni? \in? ⧗ String → Char → Boolean

…∋… ni?

:test ('b' ∈ "ab") (true)
:test ('c' ∈ "ab") (false)
:test ("ab" ∋ 'b') (true)
:test ("ab" ∋ 'c') (false)

# converts a string of digits into a number
string→unsigned-number list→number ∘ (map C.char→number) ⧗ String → Number

:test (%(string→unsigned-number "123")) ((+123))

# converts a signed string of digits into a number
string→signed-number [(sign ^0) (string→unsigned-number ~0)] ⧗ String → Number
	sign [(B.eq? 0 '-') -‣ i]

:test (%(string→signed-number "+123")) ((+123))
:test (%(string→signed-number "-123")) ((-123))

# converts signed/unsigned number strings to a number
string→number [C.les? ^0 '0' signed unsigned] ⧗ String → Number
	signed string→signed-number 0
	unsigned string→unsigned-number 0

:test (%(string→number "123")) ((+123))
:test (%(string→number "+123")) ((+123))
:test (%(string→number "-123")) ((-123))

# converts a number to a string
number→string (map C.number→char) ∘ number→list ⧗ Number → String

:test (number→string (+123)) ("123")

# splits string by newline character
lines z [[rec]] ⧗ String → (List String)
	rec build (break (B.eq? '\n') 0)
		build [~0 [[[^3 : (5 1)]]] {}(^0) ]

:test (lines "ab\ncd") ("ab" : {}"cd")

# concats list of strings with newline character
unlines concat-map (\(…;…) '\n') ⧗ (List String) → String

:test (unlines ("ab" : {}"cd")) ("ab\ncd\n")
