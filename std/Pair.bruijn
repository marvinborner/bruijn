# MIT License, Copyright (c) 2022 Marvin Borner

:import std/Combinator .

# pairs two expressions into one
pair [[[0 2 1]]]

(:) pair

# extracts first expression from pair
fst [0 K]

^( fst

# test fst with example pair of [[0]] and [[1]]
:test (^([[0]] : [[1]])) ([[0]])

# extracts second expression from pair
snd [0 KI]

~( snd

# test snd with example pair of [[0]] and [[1]]
:test (~([[0]] : [[1]])) ([[1]])

# applies both elements of a pair to a function
uncurry [[1 ^0 ~0]]

# test uncurry with example pair of [[0]] and [[1]] and some combinator
:test (uncurry W ([[0]] : [[1]])) ([[1]])

# applies a function to the pair of two values
curry [[[2 (1 : 0)]]]

# test curry with example pair of [[0]] and [[1]] and fst
:test (curry fst [[0]] [[1]]) ([[0]])

# swaps the values of a pair
swap [~0 : ^0]

# test swap with example pair of [[0]] and [[1]]
:test (swap ([[0]] : [[1]])) ([[1]] : [[0]])
