# MIT License, Copyright (c) 2022 Marvin Borner

:import std/Combinator .

# pairs two expressions into one
pair [[[0 2 1]]]

(:) pair

# extracts first expression from pair
fst [0 k]

^( fst

:test (^([[0]] : [[1]])) ([[0]])

# extracts second expression from pair
snd [0 ki]

~( snd

:test (~([[0]] : [[1]])) ([[1]])

# applies both elements of a pair to a function
uncurry [[1 ^0 ~0]]

:test (uncurry w ([[0]] : [[1]])) ([[1]])

# applies a function to the pair of two values
curry [[[2 (1 : 0)]]]

:test (curry fst [[0]] [[1]]) ([[0]])

# zips two pairs (basically rotating the elements)
zip [[(^1 : ^0) : (~1 : ~0)]]

:test (zip ([[0]] : [[[0]]]) ([[1]] : [[[1]]])) (([[0]] : [[1]]) : ([[[0]]] : [[[1]]]))

# applies pairs of two pairs as arguments to a function
zip-with [[[(2 ^1 ^0) : (2 ~1 ~0)]]]

:test (zip-with w ([[0]] : [[[0]]]) ([[1]] : [[[1]]])) ([[1]] : [0])

# swaps the elements of a pair
swap [~0 : ^0]

:test (swap ([[0]] : [[1]])) ([[1]] : [[0]])
