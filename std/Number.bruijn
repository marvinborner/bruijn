# MIT License, Copyright (c) 2022 Marvin Borner
# According to works of T.Æ. Mogensen

:import std/Combinator .

:import std/Pair .

# checks whether balanced ternary number is zero
zero? [0 T [F] [F] I]

:test zero? +0 = T
:test zero? -1 = F
:test zero? +1 = F
:test zero? +42 = F

# negative trit indicating coeffecient of -1
trit-neg [[[2]]]

# positive trit indicating coeffecient of +1
trit-pos [[[1]]]

# zero trit indicating coeffecient of 0
trit-zero [[[0]]]

# shifts a negative trit into a balanced ternary number
up-neg [[[[[2 (4 3 2 1 0)]]]]]

:test up-neg +0 = -1
:test up-neg -1 = -4
:test up-neg +42 = +125

# shifts a positive trit into a balanced ternary number
up-pos [[[[[1 (4 3 2 1 0)]]]]]

:test up-pos +0 = +1
:test up-pos -1 = -2
:test up-pos +42 = +127

# shifts a zero trit into a balanced ternary number
up-zero [[[[[0 (4 3 2 1 0)]]]]]

:test up-zero +0 = [[[[0 3]]]]
:test up-zero +1 = +3
:test up-zero +42 = +126

# shifts a specified trit into a balanced ternary number
up [[[[[[5 2 1 0 (4 3 2 1 0)]]]]]]

:test up trit-neg +42 = up-neg +42
:test up trit-pos +42 = up-pos +42
:test up trit-zero +42 = up-zero +42

# negates a balanced ternary number
negate [[[[[4 3 1 2 0]]]]]

:test negate +0 = +0
:test negate -1 = +1
:test negate +42 = -42

# extracts least significant trit from balanced ternary numbers
lst [0 trit-zero [trit-neg] [trit-pos] [trit-zero]]

:test lst +0 = trit-zero
:test lst -1 = trit-neg
:test lst +1 = trit-pos
:test lst +42 = trit-zero

# converts the normal balanced ternary representation into abstract
# -> the abstract representation is used in add/sub/mul
abstractify [0 [[[[3]]]] abs-neg abs-pos abs-zero]
	abs-neg [[[[[2 4]]]]]
	abs-pos [[[[[1 4]]]]]
	abs-zero [[[[[0 4]]]]]

:test abstractify -3 = [[[[0 [[[[2 [[[[3]]]]]]]]]]]]
:test abstractify +0 = [[[[3]]]]
:test abstractify +3 = [[[[0 [[[[1 [[[[3]]]]]]]]]]]]

# converts the abstracted balanced ternary representation back to normal
# using Y/ω to solve recursion
normalize ω normalize'
	normalize' [[0 +0 [up-neg ([3 3 0] 0)] [up-pos ([3 3 0] 0)] [up-zero ([3 3 0] 0)]]]

:test normalize [[[[3]]]] = +0
:test normalize (abstractify +42) = +42
:test normalize (abstractify -42) = -42

# checks whether two balanced ternary numbers are equal
# -> removes leading 0s!
eq? [[eq-abs 1 (abstractify 0)]]
	eq-z [zero? (normalize 0)]
	eq-neg [[0 F [2 0] [F] [F]]]
	eq-pos [[0 F [F] [2 0] [F]]]
	eq-zero [[0 (1 0) [F] [F] [2 0]]]
	eq-abs [0 eq-z eq-neg eq-pos eq-zero]

:test eq? -42 -42 = T
:test eq? -1 -1 = T
:test eq? -1 +0 = F
:test eq? +0 +0 = T
:test eq? +1 +0 = F
:test eq? +1 +1 = T
:test eq? +42 +42 = T
:test eq? [[[[(1 (0 (0 (0 (0 3)))))]]]] +1 = T

# strips leading 0s from balanced ternary number
strip [fst (0 strip-z strip-neg strip-pos strip-zero)]
	strip-z pair +0 T
	strip-neg [0 [[pair (up-neg 1) F]]]
	strip-pos [0 [[pair (up-pos 1) F]]]
	strip-zero [0 [[pair (0 +0 (up-zero 1)) 0]]]

:test strip [[[[0 3]]]] = +0
:test strip [[[[2 (0 (0 (0 (0 3))))]]]] = -1
:test strip +42 = +42

# I believe Mogensen's Paper has an error in its inc/dec definitions.
# They use 3 abstractions in the inc* functions, also we use switched +/0
# in comparison to their implementation, yet the order of neg/pos/zero is
# the same. Something's weird.

# adds +1 to a balanced ternary number (can introduce leading 0s)
inc [snd (0 inc-z inc-neg inc-pos inc-zero)]
	inc-z pair +0 +1
	inc-neg [0 [[pair (up-neg 1) (up-zero 1)]]]
	inc-zero [0 [[pair (up-zero 1) (up-pos 1)]]]
	inc-pos [0 [[pair (up-pos 1) (up-neg 0)]]]

sinc [strip (inc 0)]

:test eq? (inc -42) -41 = T
:test eq? (inc -1) +0 = T
:test eq? (inc +0) +1 = T
:test eq? (inc (inc (inc (inc (inc +0))))) +5 = T
:test eq? (inc +42) +43 = T

# subs +1 from a balanced ternary number (can introduce leading 0s)
dec [snd (0 dec-z dec-neg dec-pos dec-zero)]
	dec-z pair +0 -1
	dec-neg [0 [[pair (up-neg 1) (up-pos 0)]]]
	dec-zero [0 [[pair (up-zero 1) (up-neg 1)]]]
	dec-pos [0 [[pair (up-pos 1) (up-zero 1)]]]

sdec [strip (dec 0)]

:test dec -42 = -43
:test dec +0 = -1
:test sdec (dec (dec (dec (dec +5)))) = +0
:test sdec +1 = +0
:test dec +42 = +41

# adds two balanced ternary numbers (can introduce leading 0s)
add [[add-abs 1 (abstractify 0)]]
	add-c [[1 0 trit-zero]]
	add-b-neg2 [1 (up-zero (3 0 trit-neg)) (up-neg (3 0 trit-zero)) (up-pos (3 0 trit-neg))]
	add-b-neg [1 (up-pos (3 0 trit-neg)) (up-zero (3 0 trit-zero)) (up-neg (3 0 trit-zero))]
	add-b-zero [up 1 (3 0 trit-zero)]
	add-b-pos [1 (up-zero (3 0 trit-zero)) (up-neg (3 0 trit-pos)) (up-pos (3 0 trit-zero))]
	add-b-pos2 [1 (up-pos (3 0 trit-zero)) (up-zero (3 0 trit-pos)) (up-neg (3 0 trit-pos))]
	add-a-neg [[[1 (add-b-neg 1) add-b-neg2 add-b-zero add-b-neg]]]
	add-a-pos [[[1 (add-b-pos 1) add-b-zero add-b-pos2 add-b-pos]]]
	add-a-zero [[[1 (add-b-zero 1) add-b-neg add-b-pos add-b-zero]]]
	add-z [[0 (dec (normalize 1)) (inc (normalize 1)) (normalize 1)]]
	add-abs [add-c (0 add-z add-a-neg add-a-pos add-a-zero)]

sadd [[strip (add 1 0)]]

:test eq? (add -42 -1) -43 = T
:test eq? (add -5 +6) +1 = T
:test eq? (add -1 +0) -1 = T
:test eq? (add +0 +0) +0 = T
:test eq? (add +1 +2) +3 = T
:test eq? (add +42 +1) +43 = T

# subs two balanced ternary numbers (can introduce leading 0s)
sub [[add 1 (negate 0)]]

ssub [[strip (sub 1 0)]]

:test eq? (sub -42 -1) -41 = T
:test eq? (sub -5 +6) -11 = T
:test eq? (sub -1 +0) -1 = T
:test eq? (sub +0 +0) +0 = T
:test eq? (sub +1 +2) -1 = T
:test eq? (sub +42 +1) +41 = T

# muls two balanced ternary numbers (can introduce leading 0s)
mul [[1 +0 mul-neg mul-pos mul-zero]]
	mul-neg [sub (up-zero 0) 1]
	mul-pos [add (up-zero 0) 1]
	mul-zero [up-zero 0]

smul [[strip (mul 1 0)]]

:test eq? (mul +42 +0) +0 = T
:test eq? (mul -1 +42) -42 = T
:test eq? (mul +3 +11) +33 = T
:test eq? (mul +42 -4) -168 = T
