# MIT License, Copyright (c) 2022 Marvin Borner
# Inspired by Raymond Smullyan: To Mock a Mockingbird
# -> bird monickered combinators (they're still quite useful though!)

# apply combinator
a [[1 0]]

($) a

# bluebird combinator: 1 <- 1 composition
b [[[2 (1 0)]]]

(.) b

# blackbird combinator
b' [[[[3 (2 1 0)]]]]

(..) b'

# bunting combinator
b'' [[[[[4 (3 2 1 0)]]]]]

(...) b''

# becard combinator
b''' [[[[3 (2 (1 0))]]]]

# cardinal combinator: reverse arguments
c [[[2 0 1]]]

\( c

# cardinal once removed combinator
c* [[[[3 2 0 1]]]]

# cardinal twice removed combinator
c** [[[[[4 3 2 0 1]]]]]

# dove combinator
d [[[[3 2 (1 0)]]]]

# dickcissel combinator
d' [[[[[4 3 2 (1 0)]]]]]

# dovekies combinator
d'' [[[[[4 (3 2) (1 0)]]]]]

# eagle combinator
e [[[[[4 3 (2 1 0)]]]]]

# bald eagle combinator
e' [[[[[[[6 (5 4 3) (2 1 0)]]]]]]]

# finch combinator
f [[[0 1 2]]]

# finch once removed combinator
f* [[[[3 0 1 2]]]]

# finch twice removed combinator
f** [[[[[4 3 0 1 2]]]]]

# goldfinch combinator
g [[[[3 0 (2 1)]]]]

# hummingbird combinator
h [[[2 1 0 1]]]

# idiot combinator: identity
i [0]

# idiot once removed combinator
i* [[1 0]]

# idiot twice removed combinator
i** [[[2 1 0]]]

# jay combinator
j [[[[3 2 (3 0 1)]]]]

# kestrel combinator: const, true
k [[1]]

# kite combinator: const id, false
ki [[0]]

# konstant mocker combinator
km [[0 0]]

# crossed konstant mocker combinator
km' [[1 1]]

# lark combinator
l [[1 (0 0)]]

# mockingbird/omega combinator
m [0 0]

ω m

# double mockingbird combinator
m' [[1 0 (1 0)]]

# owl combinator
o [[0 (1 0)]]

# omega combinator
Ω ω ω

# phoenix combinator
φ [[[[3 (2 0) (1 0)]]]]

# psi combinator: on
ψ [[[[3 (2 1) (2 0)]]]]

# queer combinator
q [[[1 (2 0)]]]

(>>>) q

# quixotic bird combinator
q' [[[2 (0 1)]]]

# quizzical bird combinator
q'' [[[1 (0 2)]]]

# quirky bird combinator
q''' [[[0 (2 1)]]]

# quacky bird combinator
q'''' [[[0 (1 2)]]]

# robin combinator
r [[[1 0 2]]]

# robin once removed combinator
r* [[[[3 1 0 2]]]]

# robin twice removed combinator
r** [[[[[4 3 1 0 2]]]]]

# starling combinator: <*>
s [[[2 0 (1 0)]]]

# thrush combinator: flipped $
t [[0 1]]

(&) t

# turing combinator
u [[0 (1 1 0)]]

# vireo combinator
v [[[0 2 1]]]

# vireo once removed combinator
v* [[[[3 0 2 1]]]]

# vireo twice removed combinator
v** [[[[[4 3 0 2 1]]]]]

# warbler combinator
w [[1 0 0]]

# warbler once removed combinator
w* [[[2 1 0 0]]]

# warbler twice removed combinator
w** [[[[3 2 1 0 0]]]]

# converse warbler combinator
w' [[0 1 1]]

# sage bird combinator
y [[1 (0 0)] [1 (0 0)]]

# z fixed point combinator
z [[1 [1 1 0]] [1 [1 1 0]]]

# theta combinator
θ [[0 (1 1 0)]] [[0 (1 1 0)]]

# iota combinator
ι [0 s k]

# -- combinator equivalency tests --

:test (a) (s (s k))
:test (b) (s (k s) k)
:test (b') (b b b)
:test (b'') (b (b b b) b)
:test (b''') (b (b b) b)
:test (c) (s (b b s) (k k))
:test (c*) (b c)
:test (c**) (b c*)
:test (d) (b b)
:test (d') (b (b b))
:test (d'') (b b (b b))
:test (e) (b (b b b))
:test (e') (b (b b b) (b (b b b)))
:test (f) (e t t e t)
:test (f*) (b c* r*)
:test (f**) (b f*)
:test (g) (b b c)
:test (h) (b w (b c))
:test (i) (s k k)
:test (i*) (s (s k))
:test (j) (b (b c) (w (b c e)))
:test (ki) (k i)
:test (l) (c b m)
:test (m) (s i i)
:test (m') (b m)
:test (o) (s i)
:test (q) (c b)
:test (q') (b c b)
:test (q'') (c (b c b))
:test (q''') (b t)
:test (q'''') (f* b)
:test (r) (b b t)
:test (r*) (c* c*)
:test (r**) (b r*)
:test (t) (c i)
:test (u) (l o)
:test (v) (b c t)
:test (v*) (c* f*)
:test (v**) (b v*)
:test (w) (c (b m r))
:test (w*) (b w)
:test (w**) (b (b w))
:test (w') (c w)

# -- iota and SKI tests --

:test (i) (ι ι)
:test (k) (ι (ι (ι ι)))
:test (s) (ι (ι (ι (ι ι))))
:test (b) (s (k s) k)
:test (c) (s (s (k (s (k s) k)) s) (k k))
:test (w) (s s (s k))
